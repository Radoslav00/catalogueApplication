//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVC.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        MVC.ServiceReference1.CompositeType GetDataUsingDataContract(MVC.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<MVC.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(MVC.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPositions", ReplyAction="http://tempuri.org/IService1/GetPositionsResponse")]
        ApplicationService.DTOs.PositionDTO[] GetPositions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPositions", ReplyAction="http://tempuri.org/IService1/GetPositionsResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.PositionDTO[]> GetPositionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPositionById", ReplyAction="http://tempuri.org/IService1/GetPositionByIdResponse")]
        ApplicationService.DTOs.PositionDTO GetPositionById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPositionById", ReplyAction="http://tempuri.org/IService1/GetPositionByIdResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.PositionDTO> GetPositionByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetPosition", ReplyAction="http://tempuri.org/IService1/SetPositionResponse")]
        string SetPosition(ApplicationService.DTOs.PositionDTO position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetPosition", ReplyAction="http://tempuri.org/IService1/SetPositionResponse")]
        System.Threading.Tasks.Task<string> SetPositionAsync(ApplicationService.DTOs.PositionDTO position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePosition", ReplyAction="http://tempuri.org/IService1/DeletePositionResponse")]
        string DeletePosition(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePosition", ReplyAction="http://tempuri.org/IService1/DeletePositionResponse")]
        System.Threading.Tasks.Task<string> DeletePositionAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPerson", ReplyAction="http://tempuri.org/IService1/GetPersonResponse")]
        ApplicationService.DTOs.PersonDTO[] GetPerson();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPerson", ReplyAction="http://tempuri.org/IService1/GetPersonResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.PersonDTO[]> GetPersonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPersonById", ReplyAction="http://tempuri.org/IService1/GetPersonByIdResponse")]
        ApplicationService.DTOs.PersonDTO GetPersonById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPersonById", ReplyAction="http://tempuri.org/IService1/GetPersonByIdResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.PersonDTO> GetPersonByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetPerson", ReplyAction="http://tempuri.org/IService1/SetPersonResponse")]
        string SetPerson(ApplicationService.DTOs.PersonDTO personDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetPerson", ReplyAction="http://tempuri.org/IService1/SetPersonResponse")]
        System.Threading.Tasks.Task<string> SetPersonAsync(ApplicationService.DTOs.PersonDTO personDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePerson", ReplyAction="http://tempuri.org/IService1/DeletePersonResponse")]
        string DeletePerson(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePerson", ReplyAction="http://tempuri.org/IService1/DeletePersonResponse")]
        System.Threading.Tasks.Task<string> DeletePersonAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Authorize", ReplyAction="http://tempuri.org/IService1/AuthorizeResponse")]
        bool Authorize(ApplicationService.DTOs.PersonDTO personDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Authorize", ReplyAction="http://tempuri.org/IService1/AuthorizeResponse")]
        System.Threading.Tasks.Task<bool> AuthorizeAsync(ApplicationService.DTOs.PersonDTO personDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPersonByUsername", ReplyAction="http://tempuri.org/IService1/GetPersonByUsernameResponse")]
        ApplicationService.DTOs.PersonDTO[] GetPersonByUsername(string Username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPersonByUsername", ReplyAction="http://tempuri.org/IService1/GetPersonByUsernameResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.PersonDTO[]> GetPersonByUsernameAsync(string Username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCars", ReplyAction="http://tempuri.org/IService1/GetCarsResponse")]
        ApplicationService.DTOs.CarDTO[] GetCars();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCars", ReplyAction="http://tempuri.org/IService1/GetCarsResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.CarDTO[]> GetCarsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCarsById", ReplyAction="http://tempuri.org/IService1/GetCarsByIdResponse")]
        ApplicationService.DTOs.CarDTO GetCarsById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCarsById", ReplyAction="http://tempuri.org/IService1/GetCarsByIdResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.CarDTO> GetCarsByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetCar", ReplyAction="http://tempuri.org/IService1/SetCarResponse")]
        string SetCar(ApplicationService.DTOs.CarDTO car);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetCar", ReplyAction="http://tempuri.org/IService1/SetCarResponse")]
        System.Threading.Tasks.Task<string> SetCarAsync(ApplicationService.DTOs.CarDTO car);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCar", ReplyAction="http://tempuri.org/IService1/DeleteCarResponse")]
        string DeleteCar(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCar", ReplyAction="http://tempuri.org/IService1/DeleteCarResponse")]
        System.Threading.Tasks.Task<string> DeleteCarAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetZones", ReplyAction="http://tempuri.org/IService1/GetZonesResponse")]
        ApplicationService.DTOs.ZoneDTO[] GetZones();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetZones", ReplyAction="http://tempuri.org/IService1/GetZonesResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.ZoneDTO[]> GetZonesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetZoneById", ReplyAction="http://tempuri.org/IService1/GetZoneByIdResponse")]
        ApplicationService.DTOs.ZoneDTO GetZoneById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetZoneById", ReplyAction="http://tempuri.org/IService1/GetZoneByIdResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.ZoneDTO> GetZoneByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetZone", ReplyAction="http://tempuri.org/IService1/SetZoneResponse")]
        string SetZone(ApplicationService.DTOs.ZoneDTO zone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetZone", ReplyAction="http://tempuri.org/IService1/SetZoneResponse")]
        System.Threading.Tasks.Task<string> SetZoneAsync(ApplicationService.DTOs.ZoneDTO zone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteZone", ReplyAction="http://tempuri.org/IService1/DeleteZoneResponse")]
        string DeleteZone(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteZone", ReplyAction="http://tempuri.org/IService1/DeleteZoneResponse")]
        System.Threading.Tasks.Task<string> DeleteZoneAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetParts", ReplyAction="http://tempuri.org/IService1/GetPartsResponse")]
        ApplicationService.DTOs.PartDTO[] GetParts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetParts", ReplyAction="http://tempuri.org/IService1/GetPartsResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.PartDTO[]> GetPartsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPartById", ReplyAction="http://tempuri.org/IService1/GetPartByIdResponse")]
        ApplicationService.DTOs.PartDTO GetPartById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPartById", ReplyAction="http://tempuri.org/IService1/GetPartByIdResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.PartDTO> GetPartByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetPart", ReplyAction="http://tempuri.org/IService1/SetPartResponse")]
        string SetPart(ApplicationService.DTOs.PartDTO part);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetPart", ReplyAction="http://tempuri.org/IService1/SetPartResponse")]
        System.Threading.Tasks.Task<string> SetPartAsync(ApplicationService.DTOs.PartDTO part);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePart", ReplyAction="http://tempuri.org/IService1/DeletePartResponse")]
        string DeletePart(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePart", ReplyAction="http://tempuri.org/IService1/DeletePartResponse")]
        System.Threading.Tasks.Task<string> DeletePartAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : MVC.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<MVC.ServiceReference1.IService1>, MVC.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public MVC.ServiceReference1.CompositeType GetDataUsingDataContract(MVC.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<MVC.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(MVC.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public ApplicationService.DTOs.PositionDTO[] GetPositions() {
            return base.Channel.GetPositions();
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.PositionDTO[]> GetPositionsAsync() {
            return base.Channel.GetPositionsAsync();
        }
        
        public ApplicationService.DTOs.PositionDTO GetPositionById(int id) {
            return base.Channel.GetPositionById(id);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.PositionDTO> GetPositionByIdAsync(int id) {
            return base.Channel.GetPositionByIdAsync(id);
        }
        
        public string SetPosition(ApplicationService.DTOs.PositionDTO position) {
            return base.Channel.SetPosition(position);
        }
        
        public System.Threading.Tasks.Task<string> SetPositionAsync(ApplicationService.DTOs.PositionDTO position) {
            return base.Channel.SetPositionAsync(position);
        }
        
        public string DeletePosition(int id) {
            return base.Channel.DeletePosition(id);
        }
        
        public System.Threading.Tasks.Task<string> DeletePositionAsync(int id) {
            return base.Channel.DeletePositionAsync(id);
        }
        
        public ApplicationService.DTOs.PersonDTO[] GetPerson() {
            return base.Channel.GetPerson();
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.PersonDTO[]> GetPersonAsync() {
            return base.Channel.GetPersonAsync();
        }
        
        public ApplicationService.DTOs.PersonDTO GetPersonById(int id) {
            return base.Channel.GetPersonById(id);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.PersonDTO> GetPersonByIdAsync(int id) {
            return base.Channel.GetPersonByIdAsync(id);
        }
        
        public string SetPerson(ApplicationService.DTOs.PersonDTO personDTO) {
            return base.Channel.SetPerson(personDTO);
        }
        
        public System.Threading.Tasks.Task<string> SetPersonAsync(ApplicationService.DTOs.PersonDTO personDTO) {
            return base.Channel.SetPersonAsync(personDTO);
        }
        
        public string DeletePerson(int id) {
            return base.Channel.DeletePerson(id);
        }
        
        public System.Threading.Tasks.Task<string> DeletePersonAsync(int id) {
            return base.Channel.DeletePersonAsync(id);
        }
        
        public bool Authorize(ApplicationService.DTOs.PersonDTO personDTO) {
            return base.Channel.Authorize(personDTO);
        }
        
        public System.Threading.Tasks.Task<bool> AuthorizeAsync(ApplicationService.DTOs.PersonDTO personDTO) {
            return base.Channel.AuthorizeAsync(personDTO);
        }
        
        public ApplicationService.DTOs.PersonDTO[] GetPersonByUsername(string Username) {
            return base.Channel.GetPersonByUsername(Username);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.PersonDTO[]> GetPersonByUsernameAsync(string Username) {
            return base.Channel.GetPersonByUsernameAsync(Username);
        }
        
        public ApplicationService.DTOs.CarDTO[] GetCars() {
            return base.Channel.GetCars();
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.CarDTO[]> GetCarsAsync() {
            return base.Channel.GetCarsAsync();
        }
        
        public ApplicationService.DTOs.CarDTO GetCarsById(int id) {
            return base.Channel.GetCarsById(id);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.CarDTO> GetCarsByIdAsync(int id) {
            return base.Channel.GetCarsByIdAsync(id);
        }
        
        public string SetCar(ApplicationService.DTOs.CarDTO car) {
            return base.Channel.SetCar(car);
        }
        
        public System.Threading.Tasks.Task<string> SetCarAsync(ApplicationService.DTOs.CarDTO car) {
            return base.Channel.SetCarAsync(car);
        }
        
        public string DeleteCar(int id) {
            return base.Channel.DeleteCar(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteCarAsync(int id) {
            return base.Channel.DeleteCarAsync(id);
        }
        
        public ApplicationService.DTOs.ZoneDTO[] GetZones() {
            return base.Channel.GetZones();
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.ZoneDTO[]> GetZonesAsync() {
            return base.Channel.GetZonesAsync();
        }
        
        public ApplicationService.DTOs.ZoneDTO GetZoneById(int id) {
            return base.Channel.GetZoneById(id);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.ZoneDTO> GetZoneByIdAsync(int id) {
            return base.Channel.GetZoneByIdAsync(id);
        }
        
        public string SetZone(ApplicationService.DTOs.ZoneDTO zone) {
            return base.Channel.SetZone(zone);
        }
        
        public System.Threading.Tasks.Task<string> SetZoneAsync(ApplicationService.DTOs.ZoneDTO zone) {
            return base.Channel.SetZoneAsync(zone);
        }
        
        public string DeleteZone(int id) {
            return base.Channel.DeleteZone(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteZoneAsync(int id) {
            return base.Channel.DeleteZoneAsync(id);
        }
        
        public ApplicationService.DTOs.PartDTO[] GetParts() {
            return base.Channel.GetParts();
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.PartDTO[]> GetPartsAsync() {
            return base.Channel.GetPartsAsync();
        }
        
        public ApplicationService.DTOs.PartDTO GetPartById(int id) {
            return base.Channel.GetPartById(id);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.PartDTO> GetPartByIdAsync(int id) {
            return base.Channel.GetPartByIdAsync(id);
        }
        
        public string SetPart(ApplicationService.DTOs.PartDTO part) {
            return base.Channel.SetPart(part);
        }
        
        public System.Threading.Tasks.Task<string> SetPartAsync(ApplicationService.DTOs.PartDTO part) {
            return base.Channel.SetPartAsync(part);
        }
        
        public string DeletePart(int id) {
            return base.Channel.DeletePart(id);
        }
        
        public System.Threading.Tasks.Task<string> DeletePartAsync(int id) {
            return base.Channel.DeletePartAsync(id);
        }
    }
}
